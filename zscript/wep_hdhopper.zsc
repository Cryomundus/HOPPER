/*
	The "HOPPER" Rocket Launcher - A single load Rocket Launcher capable of 
	launching either rocket grenades or HEAT rockets. 

	A few years prior to the Tyrant's invasion, and subsequent takeover, the UAC
	had contracted, at the time, a well regarded German weapons 
	manufacturer by the name of Hopps Inc. Their contract was for a cheap, 
	lightweight, easy to transport rocket launcher. The end result of that was 
	the Hopps Mobile Infantry Launcher, nicknamed the HOPPER. Unfortunately for 
	the Hopps Inc., by the time they had finished and sent out the finalized 
	launcher, the Tyrant invaded. What was originally intended for UAC troops 
	was subsequently raided by multiple resistance groups during the chaos of 
	the initial invasion, resulting in many of the HOPPER launchers being 
	randomly dumped alongside strategic pockets of explosive ordnance. 
*/
// -----------------------------------------------------------------------------
// Why ROCK when you can blop and hop?
// -----------------------------------------------------------------------------
const HDLD_HOPPER="hop";
class HDHopper:HDWeapon
{
	default
	{
		+weapon.explosive
		+hdweapon.fitsinbackpack
		weapon.selectionorder 93;
		weapon.slotnumber 5;
		weapon.slotpriority 0;
		scale 0.6;
		inventory.pickupmessage "You got the Hopper launcher!";
		obituary "%o was hopp'd on by %k.";
		hdweapon.barrelsize 30,1.6,3;
		tag "Hopper Launcher";
		hdweapon.refid HDLD_HOPPER;
	}
	
action void A_BackBlast()
	{	
		vector3 positionoffset = pos+gunpos((0,0,-getdefaultbytype("GyroGrenade").height*0.6));
		let blst=hd_hopperbackblast(spawn("HD_HopperBackblast",positionoffset,
			ALLOW_REPLACE)
		);
		blst.angle=angle-180;
		blst.pitch=pitch-180;
		blst.target=self;
		blst.master=self;
		blst.vel.xy = (cos(angle-180) * 60, sin(angle-180) * 60);
		blst.vel.z=-sin(pitch)*-60;
	}
	
	
action void A_HeatBackBlast()
	{
		vector3 positionoffset = pos+gunpos((0,0,-getdefaultbytype("HDHEAT").height*0.6));
		let blst=hd_hopperheatbackblast(spawn("HD_HopperheatBackblast",positionoffset,
			ALLOW_REPLACE)
		);
		blst.angle=angle-180;
		blst.pitch=pitch-180;
		blst.target=self;
		blst.master=self;
		blst.vel.xy = (cos(angle-180) * 60, sin(angle-180) * 60);
		blst.vel.z=-sin(pitch)*-60;
	}
	
	
	override void tick()
	{
		super.tick();
		drainheat(RLS_SMOKE,12);
	}
	
	override bool AddSpareWeapon(actor newowner)
	{
		return AddSpareWeaponRegular(newowner);
	}
	
	override hdweapon GetSpareWeapon(actor newowner,bool reverse,bool doselect)
	{
		return GetSpareWeaponRegular(newowner,reverse,doselect);
	}
	
	
	override double gunmass()
	{
		int result = 4;
		if(weaponstatus[0]&HOPPF_LOADED_RG || weaponstatus[0]&HOPPF_LOADED_HR)
			result++;
		return result;
	}
	
	override double weaponbulk()
	{
		int result = 70;
		if(weaponstatus[0]&HOPPF_LOADED_RG || weaponstatus[0]&HOPPF_LOADED_HR)
			result += ENC_ROCKETLOADED;
		return result;
	}
	
	
	// Contextual pickup messages, because they're easy to do. 
	override string pickupmessage()
	{
		string msg=super.pickupmessage();
		if(weaponstatus[0]&HOPPF_LOADED_HR)
		{
			msg = msg.."...Why are you smiling?";
		}
		else if(weaponstatus[0]&HOPPF_LOADED_RG)
		{
			msg = msg.."...And it's got a good heft to it.";
		}
		else if(!(weaponstatus[0]&HOPPF_LOADED_RG))
		{
			msg = msg.."...but it's disappointingly light...";
		}
		return msg;
	}
	
	// Static pickup sprite.
	override string,double getpickupsprite()
	{
		return "HPPUA0",1.;
	}
	
	override void DrawHUDStuff(HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl)
	{
		if(sb.hudlevel==1){
			sb.drawimage("ROQPA0",(-37,-4),sb.DI_SCREEN_CENTER_BOTTOM,scale:(0.6,0.6));
			sb.drawimage("ROCKA0",(-48,-4),sb.DI_SCREEN_CENTER_BOTTOM,scale:(0.6,0.6));
			sb.drawnum(hpl.countinv("HDRocketAmmo"),-31,-8,sb.DI_SCREEN_CENTER_BOTTOM);
			sb.drawnum(hpl.countinv("HEATAmmo"),-44,-8,sb.DI_SCREEN_CENTER_BOTTOM);
		}
		
		// Rocket Grenade Icon
		if(hdw.weaponstatus[0]&HOPPF_LOADED_RG)
		{
			sb.drawrect(-26,-7,2,1);
			sb.drawrect(-23,-7,5,3);

		}
		// HEAT Icon
		else if(hdw.weaponstatus[0]&HOPPF_LOADED_HR)
		{
			sb.drawrect(-26,-7,8,3);
		}
		// Empty Icon
		else
		{
			sb.drawrect(-20,-7,2,1);
			sb.drawrect(-23,-7,2,1);
			sb.drawrect(-26,-7,2,1);
		}
	}
	override string gethelptext()
	{

		string helpstring = "";
		if(!(weaponstatus[0]&HOPPF_LOADED_HR))
		{
			helpstring = helpstring..WEPHELP_FIRESHOOT..WEPHELP_RELOADRELOAD;
			helpstring = helpstring..WEPHELP_ALTRELOAD.."  Load H.E.A.T. round\n";
			helpstring = helpstring..WEPHELP_UNLOADUNLOAD;
		}
		else
		{
			helpstring = helpstring..WEPHELP_FIRESHOOT;
			helpstring = helpstring..WEPHELP_RELOAD..", "..WEPHELP_ALTRELOAD.." or "..WEPHELP_UNLOAD.."  Remove H.E.A.T. round\n";
		}

		return helpstring;
	}
	int rangefinder;
	override void DrawSightPicture(
		HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl,
		bool sightbob,vector2 bob,double fov,bool scopeview,actor hpc
	){
		/*double dotoff=max(abs(bob.x),abs(bob.y));

		if(dotoff<3){
			string whichdot=sb.ChooseReflexReticle(hdw.weaponstatus[RLS_DOT]);
			sb.drawimage(
				whichdot,(0,0)+bob*3,sb.DI_SCREEN_CENTER|sb.DI_ITEM_CENTER,
				alpha:0.8-dotoff*0.04,scale:(0.8,0.8),
				col:0xFF000000|sb.crosshaircolor.GetInt()
			);
		}
		sb.drawimage(
			"xh25",(0,0)+bob,sb.DI_SCREEN_CENTER|sb.DI_ITEM_CENTER,
			scale:(1.6,1.6)
		);
		if(hdw.weaponstatus[RLS_CHAMBER]<=1){
			int airburst=hdw.airburst;
			if(airburst)sb.drawnum(airburst/100,
				10+bob.x,9+bob.y,sb.DI_SCREEN_CENTER,Font.CR_BLACK
			);
		}
		*/
		sb.drawimage(
				"hlsite",(0,+4)+bob,sb.DI_SCREEN_CENTER|sb.DI_ITEM_CENTER,
				scale:(0.8,0.8)
		);
		
		if(scopeview)
		{
			double degree=4.;
			double deg=1/degree;
			int scaledyoffset=40;
			int scaledwidth=56;
			int cx,cy,cw,ch;
			[cx,cy,cw,ch]=screen.GetClipRect();
			sb.SetClipRect(
				bob.x-(scaledwidth>>1),bob.y+scaledyoffset-(scaledwidth>>1),
				scaledwidth,scaledwidth,
				sb.DI_SCREEN_CENTER
			);
			/* // now defunct as of release 4.8.2a
			if(HDMath.Pre460()){
				//the old square view code - kept until LZDoom supports Shape2D
				texman.setcameratotexture(hpc,"HDXHCAM3",degree);
				sb.drawimage(
					"HDXHCAM3",(0,scaledyoffset)+bob,
					sb.DI_SCREEN_CENTER|sb.DI_ITEM_CENTER,
					scale:(0.5,0.5)
				);
				sb.drawimage(
					"scophole",(0,scaledyoffset)+bob*5,sb.DI_SCREEN_CENTER|sb.DI_ITEM_CENTER,
					scale:(0.95,0.95)
				);
			}else
			*/
			{
				//the new circular view code that doesn't work with LZDoom 3.87c

				sb.fill(color(255,0,0,0),
					bob.x-27,scaledyoffset+bob.y-27,
					54,54,sb.DI_SCREEN_CENTER|sb.DI_ITEM_CENTER
				);

				texman.setcameratotexture(hpc,"HDXCAM_RLAUN",degree);
				let cam  = texman.CheckForTexture("HDXCAM_RLAUN",TexMan.Type_Any);
				double camSize = texman.GetSize(cam);
				sb.DrawCircle(cam, (0, scaledyoffset) + bob*5, .34, usePixelRatio: true);
			}
			screen.SetClipRect(cx,cy,cw,ch);

			sb.drawimage(
				"hlret",(0,scaledyoffset)+bob,sb.DI_SCREEN_CENTER|sb.DI_ITEM_CENTER,
				scale:(0.82,0.82)
			);
			sb.drawimage(
				"hlscop",(0,scaledyoffset)+bob,sb.DI_SCREEN_CENTER|sb.DI_ITEM_CENTER,
				scale:(0.82,0.82)
			);
		}
	}
	// Has no red-dot. 
	override void SetReflexReticle(int which){}
	
	// Copied from the rocket launcher. Drops both ammos. 
	override void DropOneAmmo(int amt)
	{
		if(owner){
			amt=clamp(amt,1,10);
			double angchange=owner.findinventory("HEATAmmo")?10:0;
			if(angchange)owner.angle-=angchange;
			owner.A_DropInventory("HDRocketAmmo",1);
			if(angchange){
				owner.angle+=angchange*2;
				owner.A_DropInventory("HEATAmmo",1);
				owner.angle-=angchange;
			}
		}
	}
	override void ForceBasicAmmo(){
		owner.A_TakeInventory("DudRocketAmmo");
		owner.A_SetInventory("HDRocketAmmo",1);
	}
	states{
	select0:
		HPPR A 0;
		goto select0small;
	deselect0:
		HPPR A 0;
		goto deselect0small;

	ready:
		HPPR A 1 A_WeaponReady(WRF_ALL);
		goto readyend;
	hold:
	fire:
		HPPR A 0 A_JumpIf(invoker.weaponstatus[0]&HOPPF_LOADED_RG || invoker.weaponstatus[0]&HOPPF_LOADED_HR,"reallyshoot");
		goto nope;
	reallyshoot:
		HPPR B 2
		{
		A_GunFlash();
		gyrogrenade rkt;
		class<actor> rrr;
		if(invoker.weaponstatus[0]&HOPPF_LOADED_HR)
		{
			rrr="HDHEAT";
			invoker.weaponstatus[0]&=~HOPPF_LOADED_HR;
			A_ChangeVelocity(-cos(pitch),0,-sin(pitch),CVF_RELATIVE);
			A_SetHelpText();
			A_HeatBackBlast();
		}
		else
		{
			invoker.weaponstatus[0]&=~HOPPF_LOADED_RG;
			rrr="GyroGrenade";
			A_BackBlast();
		}


		vector3 gpos=pos+gunpos((0,0,-getdefaultbytype(rrr).height*0.6));
		rkt = gyrogrenade(spawn(rrr,gpos,ALLOW_REPLACE));
		let hdp=hdplayerpawn(self);
		if(hdp){
			rkt.angle=hdp.gunangle;
			rkt.pitch=hdp.gunpitch;
		}else{
			rkt.angle=angle;
			rkt.pitch=pitch;
		}
		rkt.target=self;rkt.master=self;
		rkt.primed=false;
		rkt.isrocket=true;

		A_ZoomRecoil(0.7);
		if(gunbraced())
			{
				hdplayerpawn(self).gunbraced=false;
				A_MuzzleClimb(
					0,0,
					frandom(0.7,1.2),-frandom(0.7,1.5),
					frandom(0.3,0.9),-frandom(0.9,1.6),
					-frandom(0.4,1.0),frandom(1.5,2.3));
				A_ChangeVelocity(cos(pitch)*-1,0,sin(pitch)*1,CVF_RELATIVE);
			}
		else
			{
				A_MuzzleClimb(
					0,0,
					frandom(1.2,1.7),-frandom(2,2.5),
					frandom(1.,1.2),-frandom(2.5,3),
					frandom(0.6,0.8),-frandom(2,3));
				A_ChangeVelocity(cos(pitch)*-3,0,sin(pitch)*3,CVF_RELATIVE);
				if(self is "hdplayerpawn")hdplayerpawn(self).stunned+=10;
			}
		invoker.weaponstatus[RLS_SMOKE]+=50;
		invoker.weaponstatus[HOPPF_LOADED_RG]=0;
		
		A_StartSound("weapons/rockignite",CHAN_WEAPON,CHANF_OVERLAP);
		A_StartSound("weapons/rockboom",CHAN_WEAPON,CHANF_OVERLAP);
		}
		HPPR A 2;
		HPPR A 5;
		goto nope;
		
	loadcommon:
		HPPR A 1 offset(2,36)A_StartSound("weapons/rockopen",8);
		HPPR A 1 offset(4,42)A_MuzzleClimb(-frandom(1.2,2.4),frandom(1.2,2.4));
		HPPR A 1 offset(10,50);
		HPPR A 2 offset(12,60)A_MuzzleClimb(-frandom(1.2,2.4),frandom(1.2,2.4));
		HPPR A 3 offset(13,72) A_StartSound("weapons/rockopen2",8,CHANF_OVERLAP);
		HPPR A 3 offset(14,74);
		HPPR A 6 offset(11,76)A_StartSound("weapons/pocket",9);
		HPPR A 14 offset(10,72);
		HPPR A 0{
			if(health<40)A_SetTics(7);
			else if(health<60)A_SetTics(3);
		}
		HPPR A 4 offset(12,74) A_StartSound("weapons/rockreload",8);
		HPPR A 2 offset(10,72){
			if(invoker.weaponstatus[0]&HOPPF_JUSTUNLOAD){
				if(
					!(invoker.weaponstatus[0]&HOPPF_LOADED_RG)
				)setweaponstate("reloadend");else{
					invoker.weaponstatus[0]&=~HOPPF_LOADED_RG;
					if(
						(!PressingUnload()&&!PressingReload())
						||A_JumpIfInventory("HDRocketAmmo",0,"null")
					)
					A_SpawnItemEx(
						"HDRocketAmmo",10,0,height-16,vel.x,vel.y,vel.z+2,
						0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION
					);
					else{
						A_GiveInventory("HDRocketAmmo",1);
						A_StartSound("weapons/pocket",9);
						A_SetTics(4);
					}
				}
			}else{
				if(
					invoker.weaponstatus[0]&HOPPF_LOADED_RG
					||!countinv("HDRocketAmmo")
				)setweaponstate("reloadend");else{
					A_TakeInventory("HDRocketAmmo",1,TIF_NOTAKEINFINITE);
					invoker.weaponstatus[0]|=HOPPF_LOADED_RG;
					A_SetTics(5);
				}
			}
		}
	reloadend:
		HPPR A 1 offset(12,80);
		HPPR A 1 offset(11,88);
		HPPR A 1 offset(10,90) A_StartSound("weapons/rockopen2",8);
		HPPR A 1 offset(10,94);
		TNT1 A 4;
		HPPR A 0 A_StartSound("weapons/rockopen",8,CHANF_OVERLAP);
		HPPR A 1 offset(8,78);
		HPPR A 1 offset(8,66);
		HPPR A 1 offset(8,52);
		HPPR A 1 offset(4,40);
		HPPR A 1 offset(2,34);
		goto ready;
	user1:
	altreload:
		HPPR A 4
		{
			if(invoker.weaponstatus[0]&HOPPF_LOADED_HR)
			{
			}
			else if(invoker.weaponstatus[0]&HOPPF_LOADED_RG || !countinv("HEATAmmo"))
				setweaponstate("nope");
		}
		HPPR A 1 offset(0,34);
		HPPR A 1 offset(0,36);
		HPPR A 1 offset(0,38);
		HPPR A 4 offset(0,40)  A_StartSound("weapons/rockopen",8);
		HPPR A 10 offset(0,38) A_StartSound("weapons/rockopen2",8);
		HPPR A 12 offset(1,38)  A_StartSound("weapons/pocket",8);
		HPPR A 0
		{
			if(health<40)A_SetTics(7);
			else if(health<60)A_SetTics(3);
		}
		HPPR A 4 offset(0,40) A_StartSound("weapons/rockreload",8);

		HPPR A 6{
			int hplh=invoker.weaponstatus[0];
			if(invoker.weaponstatus[0]&HOPPF_LOADED_HR)
			{
				setweaponstate("removeheatfromchamber");
				return;
			}

			if(invoker.weaponstatus[HOPPF_LOADED_HR] == 0)
			{
				setweaponstate("loadheatintoemptychamber");
				return;
			}
		}goto loadheatintoemptychamber;
	loadheatintoemptychamber:
		HPPR A 3 offset(0,38);
		HPPR A 2 offset(0,34){
			if(!countinv("HEATAmmo"))return;
			invoker.weaponstatus[0]|=HOPPF_LOADED_HR;
			A_SetHelpText();
			A_TakeInventory("HEATAmmo",1,TIF_NOTAKEINFINITE);
		}goto altreloadend;
	removeheatfromchamber:
		HPPR A 10 offset(1,35){
			invoker.weaponstatus[0]&=~HOPPF_LOADED_HR;
			A_SetHelpText();
			if(
				A_JumpIfInventory("HEATAmmo",0,"null")
				|| (!PressingUnload() && !PressingReload()&&!PressingAltReload())
			){
				A_SpawnItemEx(
					"HEATAmmo",10,0,height-16,vel.x,vel.y,vel.z+2,
					0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION
				);
				setweaponstate("altreloadend");
			}else{
				A_StartSound("weapons/pocket",9);
				A_GiveInventory("HEATAmmo",1);
			}
		}goto altreloadend;
	altreloadend:
		HPPR A 5 offset(0,36) A_StartSound("weapons/rockopen2",8);
		HPPR A 0 A_StartSound("weapons/rockopen",8);
		HPPR A 1 offset(0,38);
		HPPR A 1 offset(0,36);
		HPPR A 1 offset(0,34);
		goto nope;
	reload:
		HPPR A 0
		{
			if(invoker.weaponstatus[0]&HOPPF_LOADED_HR)
				setweaponstate("altreload");
			else if(invoker.weaponstatus[0]&HOPPF_LOADED_RG
			|| !countinv("HDRocketAmmo"))
				setweaponstate("nope");
		}
		HPPR A 0
		{
			invoker.weaponstatus[0]&=~HOPPF_JUSTUNLOAD;
		}
		goto loadcommon;
	unload:
		HPPR A 0{
			if(invoker.weaponstatus[0]&HOPPF_LOADED_HR)
				setweaponstate("altreload");
			else if(!(invoker.weaponstatus[0]&HOPPF_LOADED_RG))
			setweaponstate("nope");
			else
			{
				invoker.weaponstatus[0]|=HOPPF_JUSTUNLOAD;
			}
		}goto loadcommon;

	spawn:
		HPPU A -1;
	}
	override void loadoutconfigure(string input){

		int heatround=getloadoutvar(input,"heat",1);
		if(heatround>0)
			weaponstatus[0]=HOPPF_LOADED_HR;
		else
			weaponstatus[0]=HOPPF_LOADED_RG;
	}
	override void InitializeWepStats(bool idfa){
		weaponstatus[0]=HOPPF_LOADED_RG;
		if(!idfa && !owner)
		{
			switch(random(0,1))
			{
			case 1:
				weaponstatus[0]=HOPPF_LOADED_HR;
				break;
			}
		}
	}
}
enum hopperstatus{ 
	HOPPF_LOADED_RG=1,
	HOPPF_LOADED_HR=2,
	HOPPF_JUSTUNLOAD=1,
	HOPPF_STATUS=0,
};


